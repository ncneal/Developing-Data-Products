inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain, ]
training <- adData[ inTrain, ]
testing <- adData[ - inTrain ]
testing <- adData[ -inTrain, ]
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain, ]
testing <- adData[ -inTrain, ]
set.seed(62433)
fitRf <- train(diagnosis ~., data = training, method = 'rf', prox = TRUE)
fitGbm <- train(diagnosis ~., data = training, method = 'gbm')
fitLda <- train(diagnosis ~., data = training, method = 'lda')
stackedData <- data.frame(predict(fitRf, newdata = training),
predict(fitGbm, newdata = training),
predict(fitLda, newdata = training),
training$diagnosis))
predict(fitRf, newdata = training)
stackedData <- data.frame(predict(fitRf, newdata = training),
predict(fitGbm, newdata = training),
predict(fitLda, newdata = training),
training$diagnosis)
fitStacked <- train(diagnosis ~ ., data = stackedData, method = 'rf', prox = TRUE)
stackedData <- data.frame(predict(fitRf, newdata = training),
predict(fitGbm, newdata = training),
predict(fitLda, newdata = training),
diagnosis= training$diagnosis)
fitStacked <- train(diagnosis ~ ., data = stackedData, method = 'rf', prox = TRUE)
testPredict <- predict(fitStacked, newdata = testing)
stackedData <- data.frame(predict(fitRf, newdata = testing),
predict(fitGbm, newdata = testing),
predict(fitLda, newdata = testing),
diagnosis= testing$diagnosis)
fitStacked <- train(diagnosis ~ ., data = stackedData, method = 'rf', prox = TRUE)
testPredict <- predict(fitStacked, newdata = stackedData)
finalPredict <- data.frame(stackedData, testPredict)
stackedData <- data.frame(predRf = predict(fitRf, newdata = testing),
predGbm = predict(fitGbm, newdata = testing),
predLda = predict(fitLda, newdata = testing),
diagnosis= testing$diagnosis)
fitStacked <- train(diagnosis ~ ., data = stackedData, method = 'rf', prox = TRUE)
testPredict <- predict(fitStacked, newdata = stackedData)
finalPredict <- data.frame(stackedData, testPredict)
confusionMatrix(finalPredict$testPredict, finalPredict$diagnosis)
confusionMatrix(finalPredict$testPredict, finalPredict$diagnosis)$accuracy
confusionMatrix(finalPredict$testPredict, finalPredict$diagnosis)$Accuracy
stackCm <- confusionMatrix(finalPredict$testPredict, finalPredict$diagnosis)
stackCm <- confusionMatrix(finalPredict$testPredict, finalPredict$diagnosis)[overall$Accuracy]
stackCm <- confusionMatrix(finalPredict$testPredict, finalPredict$diagnosis)[table$Accuracy]
stackCm <- confusionMatrix(finalPredict$testPredict, finalPredict$diagnosis)$overall['Accuracy']
stackCm
stackAcc <- confusionMatrix(finalPredict$testPredict, finalPredict$diagnosis)$overall['Accuracy']
RfAcc <- confusionMatrix(finalPredict$predRf, finalPredict$diagnosis)$overall['Accuracy']
GbmAcc <- confusionMatrix(finalPredict$predGbm, finalPredict$diagnosis)$overall['Accuracy']
LdaAcc <- confusionMatrix(finalPredict$predLda, finalPredict$diagnosis)$overall['Accuracy']
accuracy <- data.frame(stackAcc, RfAcc, GbmAcc, LdaAcc)
accuracy
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
glmnetFit <- train(CompressiveStrength ~ ., data = training, method = 'glmnet')
install.packages('glmnet')
set.seed(233)
glmnetFit <- train(CompressiveStrength ~ ., data = training, method = 'glmnet')
set.seed(233)
lassoFit <- train(CompressiveStrength ~ ., data = training, method = 'lasso')
install.packages('elasticnet')
set.seed(233)
lassoFit <- train(CompressiveStrength ~ ., data = training, method = 'lasso')
?plot.enet
plot.enet(lassoFit)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(lassoFit$finalModel, xvar = "penalty", use.color = TRUE)
library(lubridate) # For year() function below
dat = read.csv("C:/temp/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
checkInstall('lubridate')
checkInstall('somepackage')
checkInstall('forecast')
library('forecast')
?bats
bastsFit <- bats(tstrain)
batsFit <- bats(tstrain)
?forecast
fcast <- forecast(testing, model = batsFit)
tstest = ts(testing$visitsTumblr)
fcast <- forecast(tstest, model = batsFit)
fcast
?ts
plot(fcast)
fcast <- forecast(batsFit)
plot(fcast); lines(ts(testing$visitsTumblr), col = 'red')
fcast
installed.packages()
data.frame(installed.packages())
licenses <- data.frame(installed.packages())
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
test <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
library("caret")
View(train)
package_version("sqldf")
?package_version
?install.package
?install.packages
?installed.package
?installed.packages
package_version("dplyr")
installed.packages("dplyr")
packageDescription("Dplyr")
packageDescription("dplyr")
packageDescription("sqldf")
install.packages("sqldf")
db_changes <- read.csv('C:/Users/nn186026/Desktop/Dashboard/Temp Storage/Database Version Changes.csv')
library('sqldf')
?sqldf
sqldf('
SELECT
Site.ID..CSI..HIS..TBM.
FROM
db_changes
')
sqldf('
SELECT
*
FROM
db_changes
')
db_changes <- read.csv('C:/Users/nn186026/Desktop/Dashboard/Temp Storage/Database Version Changes.csv')
library('lubridate')
db_changes$ChangeDay <- ymd_hms(db_changes$ChangeDay)
db_change <- sqldf('
SELECT
SitedID,
DatabaseVersion,
MAX(ChangeDay)
FROM
db_changes
GROUP BY
SitedID, DatabaseVersion
')
db_change <- sqldf('
SELECT
SiteID,
DatabaseVersion,
MAX(ChangeDay)
FROM
db_changes
GROUP BY
SitedID, DatabaseVersion
')
db_change <- sqldf('
SELECT
SiteID,
DatabaseVersion,
MAX(ChangeDay)
FROM
db_changes
GROUP BY
SiteID, DatabaseVersion
')
library('ggplot2')
ggplot2(diamonds)
ggplot(diamonds)
ggplot(diamonds, aes(x=carat))
ggplot(diamonds, aes(x=carat, y=price))
ggplot(diamonds, aes(x=carat, color=cut))
ggplot(diamonds, aes(x=carat, color=cut))+geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=cut))+geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=cut))+geom_point()+geom_smooth()
ggplot(diamonds)+geom_point(aes(x=carat, y=price, color=cut))+geom_smooth(aes(x=carat, y=price, color=cut))
ggplot(diamonds)+geom_point(aes(x=carat, y=price, color=cut))+geom_smooth(aes(x=carat, y=price))
ggplot(diamonds, aes(x=carat, y=price, color=cut, shape=color))
+geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=cut, shape=color))
+geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=color, shape=cut))
+geom_point()
diamonds$color
ggplot(diamonds, aes(x=carat, y=price, color=color, shape=cut))+geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=cute, shape=color))+geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=cut, shape=color))+geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=cut, shape=color))+.geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=cut, shape=color))+.geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=cut, shape=color))+geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=cut))+geom_point()+labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))+geom_point()+labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg+geom_point()+labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg+geom_point()
gg <- gg+labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
print(gg)
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg+geom_point()
gg <- gg+labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg+theme(plot.title = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 25),
axis.title.y = element_test(size = 25)) + scale_color_discrete(name = "Cut of Diamond")
print(gg)
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg+geom_point()
gg <- gg+labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg+theme(plot.title = element_text(size = 30, face = "bold", align = "center"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 25),
axis.title.y = element_test(size = 25)) + scale_color_discrete(name = "Cut of Diamond")
print(gg)
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg+geom_point()
gg <- gg+labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg+theme(plot.title = element_text(size = 30, face = "bold", align = "center"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25)) + scale_color_discrete(name = "Cut of Diamond")
print(gg)
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg+geom_point()
gg <- gg+labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg+theme(plot.title = element_text(size = 30, face = "bold"),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25)) + scale_color_discrete(name = "Cut of Diamond")
print(gg)
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg+geom_point()
gg <- gg+labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg+theme(plot.title = element_text(size = 20, face = "bold"),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15)) + scale_color_discrete(name = "Cut of Diamond")
print(gg)
gg <- gg+facet_wrap( ~ cut, ncol = 3)
print(gg)
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg + geom_point()
gg <- gg + labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg + theme(plot.title = element_text(size = 15, face = "bold"),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10)) + scale_color_discrete(name = "Cut of Diamond")
gg <- gg + facet_wrap( ~ cut, ncol = 3)
print(gg)
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg + geom_point()
gg <- gg + labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg + theme(plot.title = element_text(size = 15, face = "bold"),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10)) + scale_color_discrete(name = "Cut of Diamond")
gg <- gg + facet_wrap( ~ cut, ncol = 3)
print(gg)
gg <- gg + facet_wrap( ~ cut)
gg <- gg + facet_wrap( ~ cut)
print(gg)
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg + geom_point()
gg <- gg + labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg + theme(plot.title = element_text(size = 15, face = "bold"),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10)) + scale_color_discrete(name = "Cut of Diamond")
gg <- gg + facet_wrap(color ~ cut)
print(gg)
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg + geom_point()
gg <- gg + labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg + theme(plot.title = element_text(size = 15, face = "bold"),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10)) + scale_color_discrete(name = "Cut of Diamond")
gg <- gg + facet_wrap(color ~ cut, scales = "free")
print(gg)
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg + geom_point()
gg <- gg + labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg + theme(plot.title = element_text(size = 15, face = "bold"),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10)) + scale_color_discrete(name = "Cut of Diamond")
gg <- gg + facet_wrap(color ~ cut, scales = "free")
print(gg)
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut))
gg <- gg + geom_point()
gg <- gg + labs(title = 'Scatter Plot', x = 'Carat', y = 'Price')
gg <- gg + theme(plot.title = element_text(size = 15, face = "bold"),
axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 5),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10)) + scale_color_discrete(name = "Cut of Diamond")
gg <- gg + facet_grid(color ~ cut)
print(gg)
gg2 <- ggplot(mtcars, aes(x = cyl))
gg2 <- ggplot(mtcars, aes(x = cyl))+geom_area()
print(gg2)
gg2 <- ggplot(mtcars, aes(x = cyl))+geom_bar()
print(gg2)
mtcars
gg2 <- ggplot(mtcars, aes(x = cyl))+geom_bar(stat = 'identity')
print(gg2)
gg2 <- ggplot(mtcars, aes(x = cyl, y = ncol(cyl)))+geom_bar(stat = 'identity')
print(gg2)
gg2 <- ggplot(mtcars, aes(x = cyl, y = hp))+geom_bar(stat = 'identity')
print(gg2)
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", na.strings = C("NA",""), strip.white = T)
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", na.strings = C("NA",""), strip.white = T)
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
na.strings = C("NA",""),
strip.white = T
)
train <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
na.strings = c("NA",""),
strip.white = T
)
rawData <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", na.strings=c("NA",""), strip.white=T)
dim(rawData)
library("caret")
set.seed(1234)
rawData <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", na.strings=c("NA",""), strip.white=T)
dim(rawData)
isNA <- apply(rawData, 2, function(x) { sum(is.na(x)) })
validData <- subset(rawData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(validData)
inTrain <- createDataPartition(validData$classe, p=0.7, list=F)
training <- validData[inTrain,]
testing <- validData[-inTrain,]
ctrl <- trainControl(allowParallel=T, method="cv", number=4)
model <- train(classe ~ ., data=training, model="rf", trControl=ctrl)
pred <- predict(model, newdata=testing)
install.packages(png)
install.packages('png')
install.packages('gridExtra')
install.packages('magrittr')
install.packages("magrittr")
rm(list = ls())
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "data.csv")
data <- read.csv("data.csv")
require(caret)
set.seed(567)
inTrain <- createDataPartition(y = data$classe, p = 0.6, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "validation.csv")
validation <- read.csv("validation.csv")
rm(list = c("data", "inTrain"))
str(training)
table(training$classe)
prop.table(table(training$classe))
require(magrittr)
asNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
asNumeric))
training %>%
subset(select = -c(X, user_name, raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp, new_window, num_window, classe)) %>%
factorsNumeric -> training[ , 8:159]
propmiss <- function(dataframe) {
sapply(dataframe,function(x)
data.frame(nmiss=sum(is.na(x)),
n=length(x),
propmiss=sum(is.na(x))/length(x)))
}
propmiss(training)
n.missing <- sum(sapply(training, function(x) sum(is.na(x))/length(x) >= 0.05))
training <- training[, sapply(training, function(x) sum(is.na(x))/length(x) < 0.05)]
require(knitr)
vars_left <- data.frame(Device <- character(length = 52),
Predictor <- colnames(training[8:59]))
names(vars_left) <- c("Device", "Predictor")
vars_left$Device <- as.character(vars_left$Device)
vars_left$Predictor <- as.character(vars_left$Predictor)
vars_left$Device[grepl("belt", vars_left$Predictor, ignore.case = TRUE)] <- "Belt"
vars_left$Device[grepl("arm", vars_left$Predictor, ignore.case = TRUE)] <- "Arm"
vars_left$Device[grepl("dumbbell", vars_left$Predictor, ignore.case = TRUE)] <- "Dumbbell"
vars_left$Device[grepl("forearm", vars_left$Predictor, ignore.case = TRUE)] <- "Forearm"
vars_left$Predictor <- gsub("_belt|_arm|_dumbbell|_forearm", "", vars_left$Predictor)
kable(table(vars_left$Predictor, vars_left$Device))
require(caret)
nzv <- nearZeroVar(training[8:59], saveMetrics = TRUE)
nzv
spec.cor <- function (dat, r, ...) {
x <- cor(dat, ...)
x[upper.tri(x, TRUE)] <- NA
i <- which(abs(x) >= r, arr.ind = TRUE)
data.frame(matrix(colnames(x)[as.vector(i)], ncol = 2), value = x[i])
}
spec.cor(training[ , 8:59], 0.8)
set.seed(567)
folds <- createFolds(training$classe, k = 10, list = TRUE, returnTrain = TRUE)
accuracies.dt <- c()
for (i in 1:10) {
model <- train(classe ~ ., data=training[folds[[i]], 8:60], method = "rpart")
predictions <- predict(model, training[-folds[[i]],8:59])
accuracies.dt <- c(accuracies.dt,
confusionMatrix(predictions, training[-folds[[i]], 8:60]$classe)$overall[[1]])
}
set.seed(567)
accuracies.rf <- c()
for (i in 1:10) {
model <- train(classe ~ ., data=training[folds[[i]], 8:60], method = "rf")
predictions <- predict(model, training[-folds[[i]],8:59])
accuracies.rf <- c(accuracies.rf,
confusionMatrix(predictions, training[-folds[[i]], 8:60]$classe)$overall[[1]])
}
library(caret)
libary(corrplot)
library(corrplot)
?installed.packages
is.installed <- function(mypkg) is.element(mypkg, installed.packages()[,1])
is.installed('corrplot')
is.installed('Rtsne')
install.packages('Rtsne')
is.installed('xgboost')
install.packages('xgboost')
is.installed('stats')
is.installed('knitr')
is.installed('ggplot2')
require(caret)
require(corrplot)
require(Rtsne)
require(xgboost)
require(stats)
require(knitr)
require(ggplot2)
knitr::opts_chunk$set(cache=TRUE)
# URL of the training and testing data
train.url ="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test.url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# file names
train.name = "./data/pml-training.csv"
test.name = "./data/pml-testing.csv"
# if directory does not exist, create new
if (!file.exists("./data")) {
dir.create("./data")
}
# if files does not exist, download the files
if (!file.exists(train.name)) {
download.file(train.url, destfile=train.name, method="curl")
}
if (!file.exists(test.name)) {
download.file(test.url, destfile=test.name, method="curl")
}
# load the CSV files as data.frame
train = read.csv("./data/pml-training.csv")
is.installed('magrittr')
is.installed('gridExtra')
is.installed('png')
is.installed('grid')
rm(list = ls())
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "data.csv")
data <- read.csv("data.csv")
require(caret)
set.seed(567)
inTrain <- createDataPartition(y = data$classe, p = 0.6, list = FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "validation.csv")
validation <- read.csv("validation.csv")
rm(list = c("data", "inTrain"))
str(training)
table(training$classe)
prop.table(table(training$classe))
?installed.packages()
?installed.packages
installed.packages()
dir()
getwd()
setwd('C:\Users\nn186026\OneDrive - Teradata\Learning\Coursera\Developing Data Products\Shiny\')
setwd('C:/Users/nn186026/OneDrive - Teradata/Learning/Coursera/Developing Data Products/Shiny')
dir
installed.packages
file.create('ui.R')
dir()
file.remove('iu.R')
file.remove('ui.R')
dir()
setwd('./example1')
getwd()
file.create('ui.R')
file.create('server.R')
install.packages('shiny')
installed.packages
is.installed <- function(mypkg) is.element(mypkg, installed.packages()[,1])
is.installed('Rtools')
is.installed('shiny')
install.packages('Rtools')
install.packages('RTools')
install.packages('Rtools')
library('shiny')
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
